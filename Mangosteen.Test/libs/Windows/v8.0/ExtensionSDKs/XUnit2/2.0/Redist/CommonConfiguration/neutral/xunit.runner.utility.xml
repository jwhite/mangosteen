<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.runner.utility</name>
    </assembly>
    <members>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Guard.FileExists(System.String,System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.AppDomainTestFramework">
            <summary>
            Wraps around an implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that is run from another
            app domain. This is typically done to ensure that assemblies aren't locked during discovery
            and run, so that further builds can take place while activities are still ongoing.
            </summary>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.#ctor(Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.AppDomainTestFramework"/> class.
            </summary>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="testFrameworkFileName">The file path of the test framework assembly (i.e., xunit2.dll).</param>
            <param name="testFrameworkTypeName">The fully qualified type name of the implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/>
            in the test framework assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="shadowCopy">If set to <c>true</c>, runs tests in a shadow copied app domain, which allows
            tests to be discovered and run without locking assembly files on disk.</param>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.CreateRemoteObject``1(System.String,System.Object[])">
            <summary>
            Creates an object (from the test framework assembly) in the remote app domain.
            </summary>
            <typeparam name="T">The type of the object to cast to.</typeparam>
            <param name="typeName">The fully qualified type name to create.</param>
            <param name="args">The arguments for the type's constructor.</param>
            <returns>An instance of the created object, cast to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.GetExecutor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.AppDomainTestFramework.GetExecutor(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.AppDomainTestFramework.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.NullSourceInformationProvider">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/> that always returns no
            source information. Useful for test runners which don't need or cannot provide source
            information during discovery.
            </summary>
        </member>
        <member name="T:Xunit.LongLivedMarshalByRefObject">
            <summary>
            This class inherits from <see cref="T:System.MarshalByRefObject"/> and reimplements
            <see cref="M:Xunit.LongLivedMarshalByRefObject.InitializeLifetimeService"/> in a way that allows the object to live
            longer than the remoting default lifetime (5 minutes).
            </summary>
        </member>
        <member name="M:Xunit.LongLivedMarshalByRefObject.InitializeLifetimeService">
            <summary/>
        </member>
        <member name="M:Xunit.NullSourceInformationProvider.GetSourceInformation(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.VisualStudioSourceInformationProvider">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/> that will provide source information
            when running inside of Visual Studio (via the DiaSession class).
            </summary>
        </member>
        <member name="M:Xunit.VisualStudioSourceInformationProvider.GetSourceInformation(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.IFrontController">
            <summary>
            Represents a class which acts as a front controller for unit testing frameworks.
            This allows runners to run tests from multiple unit testing frameworks (in particular,
            hiding the differences between xUnit.net v1 and v2 tests).
            </summary>
        </member>
        <member name="T:Xunit.XunitFrontController">
            <summary>
            Default implementation of <see cref="T:Xunit.IFrontController"/> which supports running tests from
            both xUnit.net v1 and v2.
            </summary>
        </member>
        <member name="M:Xunit.XunitFrontController.#ctor">
            <summary>
            This constructor is for unit testing purposes only.
            </summary>
        </member>
        <member name="M:Xunit.XunitFrontController.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.XunitFrontController"/> class.
            </summary>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="shadowCopy">If set to <c>true</c>, runs tests in a shadow copied app domain, which allows
            tests to be discovered and run without locking assembly files on disk.</param>
        </member>
        <member name="M:Xunit.XunitFrontController.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Find(System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Run(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.XunitFrontController.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Xunit2Discoverer">
            <summary>
            This class be used to do discovery of xUnit.net v2 tests, via any implementation
            of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>, including AST-based runners like CodeRush and
            Resharper. Runner authors who are not using AST-based discovery are strongly
            encouraged to use <see cref="T:Xunit.XunitFrontController"/> instead.
            </summary>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.#ctor(Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit2Discoverer"/> class. The location
            of xunit2.dll is implied based on the location of the test assembly.
            </summary>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyInfo">The assembly to use for discovery</param>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.#ctor(Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IAssemblyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit2Discoverer"/> class. This constructor
            is usually used by AST-based runners which may not have access to a test assembly on disk,
            but can point to xunit2.dll (by following the project reference in Visual Studio).
            </summary>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyInfo">The assembly to use for discovery</param>
            <param name="xunit2AssemblyPath">The path on disk of xunit2.dll</param>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.Framework">
            <summary>
            Returns the test framework from the remote app domain.
            </summary>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Xunit2">
            <summary>
            This class be used to do discovery and execution of xUnit.net v2 tests
            using a reflection-based implementation of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Xunit2.#ctor(Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit2"/> class.
            </summary>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="shadowCopy">If set to <c>true</c>, runs tests in a shadow copied app domain, which allows
            tests to be discovered and run without locking assembly files on disk.</param>
        </member>
        <member name="M:Xunit.Xunit2.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2.Run(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.AssemblyHelper">
            <summary>
            This class provides assistance with assembly resolution for missing assemblies. Runners may
            need to use <see cref="M:Xunit.AssemblyHelper.SubscribeResolve"/> to help automatically resolve missing assemblies
            when running tests.
            </summary>
        </member>
        <member name="M:Xunit.AssemblyHelper.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.AssemblyHelper.SubscribeResolve">
            <summary>
            Subscribes to the current <see cref="T:System.AppDomain"/> <see cref="E:System.AppDomain.AssemblyResolve"/> event, to
            provide automatic assembly resolution for assemblies in the runner.
            </summary>
            <returns>An object which, when disposed, un-subscribes.</returns>
        </member>
        <member name="T:Xunit.RemotingUtility">
            <summary>
            Internal helper class for remoting.
            </summary>
        </member>
        <member name="M:Xunit.RemotingUtility.CleanUpRegisteredChannels">
            <summary>
            Unregisters any remoting channels.
            </summary>
            <remarks>
            If there are any registered remoting channels, then MarshalByRefObjects
            don't work. Based on bug #9749, it's clear that MSTest (at least through
            Visual Studio 2010) registers remoting channels when it runs but doesn't
            clean them up when it's done. Right now, the only way to reliably surface
            this issue is through MSBuild (as per the bug repro), so for the moment
            this work-around code is limited to the MSBuild runner.
            </remarks>
        </member>
        <member name="T:Xunit.TestMessageVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that provides several Visit methods that
            can provide access to specific message types without the burden of casting.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor.OnMessage(Xunit.Abstractions.ITestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/> is sent to the message sink.
            </summary>
            <param name="afterTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/> is sent to the message sink.
            </summary>
            <param name="afterTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/> is sent to the message sink.
            </summary>
            <param name="beforeTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/> is sent to the message sink.
            </summary>
            <param name="beforeTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IDiscoveryCompleteMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/> is sent to the message sink.
            </summary>
            <param name="discoveryComplete">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IErrorMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IErrorMessage"/> is sent to the message sink.
            </summary>
            <param name="error">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/> is sent to the message sink.
            </summary>
            <param name="assemblyFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/> is sent to the message sink.
            </summary>
            <param name="assemblyStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseDiscoveryMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/> is sent to the message sink.
            </summary>
            <param name="testCaseDiscovered">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/> is sent to the message sink.
            </summary>
            <param name="testCaseFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/> is sent to the message sink.
            </summary>
            <param name="testCaseStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposedFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposeStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/> is sent to the message sink.
            </summary>
            <param name="testCollectionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/> is sent to the message sink.
            </summary>
            <param name="testCollectionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFailed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFailed"/> is sent to the message sink.
            </summary>
            <param name="testFailed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFinished"/> is sent to the message sink.
            </summary>
            <param name="testFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/> is sent to the message sink.
            </summary>
            <param name="testMethodFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/> is sent to the message sink.
            </summary>
            <param name="testMethodStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestPassed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestPassed"/> is sent to the message sink.
            </summary>
            <param name="testPassed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestSkipped)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestSkipped"/> is sent to the message sink.
            </summary>
            <param name="testSkipped">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestStarting"/> is sent to the message sink.
            </summary>
            <param name="testStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Xunit.TestMessageVisitor`1">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that provides several Visit methods that
            can provide access to specific message types without the burden of casting. It also record
            when it sees a completion message, and sets the <see cref="P:Xunit.TestMessageVisitor`1.Finished"/> event appropriately.
            </summary>
            <typeparam name="TCompleteMessage">The type of the completion message.</typeparam>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMessageVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.OnMessage(Xunit.Abstractions.ITestMessage)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMessageVisitor`1.Finished">
            <summary>
            This event is trigged when the completion message has been seen.
            </summary>
        </member>
    </members>
</doc>
